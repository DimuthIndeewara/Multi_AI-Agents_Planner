# -*- coding: utf-8 -*-
"""Planner with Multi-AI Agents V1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j3liFxa6miiLJ_qelKH_-mggypyd9o6C

*   **State Graph** -  The core of the the application,  defining the flow of the Travel Planner
*   **Planner State** - A custom type representing the state of planning process
*   **Node Functions** - Individual steps in planning process
*   **LLm Integration** - Utilizing a langiage model to generate the final itinerary
"""
from __future__ import annotations

#!pip install langchain langchain_core langchain_groq langchain_community langgraph
#!pip install ollama
#!pip install gradio

import os

from langchain_groq import ChatGroq
from typing import TypedDict, Annotated, List
from langgraph.graph import StateGraph , END
from langchain_core.messages import HumanMessage, AIMessage
from langchain.prompts import ChatPromptTemplate
from langchain_core.prompts import ChatMessagePromptTemplate
from langchain_core.runnables.graph import MermaidDrawMethod
#from IPython.display import display ,  Image
from typing import TypedDict, Annotated, List
import gradio as gr

# LangGraph / LangChain imports
from langgraph.graph import StateGraph, END
from langchain_core.messages import HumanMessage, AIMessage
from langchain.prompts import ChatPromptTemplate

# -----------------------------
# 1) LLM SETUP
# -----------------------------

llm  = ChatGroq(
    temperature =  0 ,
    groq_api_key =  " ", # Use groq API Key here
    model_name = "llama-3.3-70b-versatile"
)

# -----------------------------
# 2) PROMPT
# -----------------------------
itinerary_prompt = ChatPromptTemplate.from_messages([
    ("system",
     "You are a helpful travel assistant. Create an itinerary for {days} day(s) in {city} "
     "based on the user's interests: {interests}. Provide a bulleted plan (with time) for each day."),
    ("human", "Create an itinerary for my trip.")
])

# -----------------------------
# 3) STATE DEFINITION
# -----------------------------
class PlannerState(TypedDict):
    messages: Annotated[List[HumanMessage | AIMessage], "the messages in the conversation"]
    city: str
    interests: List[str]
    days: int
    itinerary: str

# -----------------------------
# 4) NODES
# -----------------------------
def input_city(state: PlannerState) -> PlannerState:
    city_text = state.get("city", "").strip()
    new_messages = state["messages"] + [HumanMessage(content=f"City: {city_text}")] if city_text else state["messages"]
    return {**state, "messages": new_messages}

def input_interest(state: PlannerState) -> PlannerState:
    interests_list = state.get("interests", [])
    new_messages = state["messages"] + [HumanMessage(content=f"Interests: {', '.join(interests_list)}")] if interests_list else state["messages"]
    return {**state, "messages": new_messages}

def create_itinerary(state: PlannerState) -> PlannerState:
    prompt_messages = itinerary_prompt.format_messages(
        city=state["city"],
        interests=", ".join(state["interests"]),
        days=state.get("days", 1)
    )
    response = llm.invoke(prompt_messages)
    itinerary_text = response.content if hasattr(response, "content") else str(response)
    return {**state, "messages": state["messages"] + [AIMessage(content=itinerary_text)], "itinerary": itinerary_text}

# -----------------------------
# 5) WORKFLOW
# -----------------------------
workflow = StateGraph(PlannerState)
workflow.add_node("Input City", input_city)
workflow.add_node("Input Interests", input_interest)
workflow.add_node("Create Itinerary", create_itinerary)
workflow.set_entry_point("Input City")
workflow.add_edge("Input City", "Input Interests")
workflow.add_edge("Input Interests", "Create Itinerary")
workflow.add_edge("Create Itinerary", END)
app_graph = workflow.compile()

# -----------------------------
# 6) GRADIO BUSINESS FUNCTION
# -----------------------------
def run_travel_planner(city: str, interests_csv: str, days: int):
    interests = [i.strip() for i in (interests_csv or "").split(",") if i.strip()]
    state: PlannerState = {
        "messages": [HumanMessage(content="I want to plan a trip")],
        "city": city.strip(),
        "interests": interests,
        "days": days,
        "itinerary": ""
    }
    final_state = app_graph.invoke(state)
    return final_state.get("itinerary", "(No itinerary returned.)")

# -----------------------------
# 7) GRADIO UI
# -----------------------------
with gr.Blocks(title="AI Multi-Day Trip Planner", theme = "glass") as demo:
    gr.Markdown("# 🗺️ AI Multi-Day Trip Planner\nEnter your destination and interests to generate a day-trip itinerary.")
    with gr.Group():
        city_in = gr.Textbox(label="Destination city", placeholder="e.g., Paris")

        interests_in = gr.Textbox(label="Your interests (comma-separated)", placeholder="museums, coffee shops, parks")

        days_in = gr.Slider(label="Number of days", minimum=1, maximum=7, step=1, value=1)

    run_btn = gr.Button("Generate Itinerary")
    itinerary_out = gr.Markdown(label="Itinerary", value="")
    run_btn.click(fn=run_travel_planner, inputs=[city_in, interests_in, days_in], outputs=[itinerary_out])

if __name__ == "__main__":
    demo.launch()
